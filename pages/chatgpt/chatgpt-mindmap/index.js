import React, { useEffect, useRef, useState } from "react";
import * as go from "gojs";
import Loader from "@/frontend/components/Loader";
import Head from "next/head";

const ChatgptMindmap = () => {
  const diagramRef = useRef(null);
  const diagramInstanceRef = useRef(null);

  useEffect(() => {
    if (!diagramRef.current) return;

    // dispose of previous Diagram instance
    if (diagramInstanceRef.current) {
      diagramInstanceRef.current.div = null;
      diagramInstanceRef.current = null;
    }

    const $ = go.GraphObject.make;
    const diagram = $(go.Diagram, diagramRef.current, {
      initialContentAlignment: go.Spot.Center,
      "undoManager.isEnabled": true,
    });

    // Define the node template with a button
    diagram.nodeTemplate = $(
      go.Node,
      "Auto",
      {
        click: (e, node) => {
          const buttonClicked = node;
          console.log(`Button clicked on node: ${buttonClicked}`);
          console.log(node.data.key);
          diagram.commandHandler.expandTree(node);
          var children = node.findTreeChildrenNodes(); // find all child nodes of the clicked node
          const nodeChildArr = [];
          children.each(function (child) {
            nodeChildArr.push(child.data.key);
            console.log(child.data.key); // log the key property of each child node to the console
          });
          console.log(nodeChildArr.length, nodeChildArr);
          if (nodeChildArr.length >= 3) {
            console.log("Only 3 child nodes can be added!!");
          } else {
            const parentKey = node.data.key;
            const model = diagram.model;
            // const parentNode = model.findNodeDataForKey(parentKey);
            model.startTransaction("add nodes");
            for (let i = 1; i <= 3; i++) {
              const childKey = parentKey + "N" + i;
              const childData = {
                key: childKey,
                text: "Child " + childKey,
                color: "#1ABC9C",
                figure: "Diamond",
                parent: parentKey,
              };
              model.addNodeData(childData);
            }
            model.commitTransaction("add nodes");
          }
        },
      },
      $(
        go.Panel,
        "Vertical",
        $(
          go.Panel,
          "Auto",
          { margin: 6, alignment: go.Spot.Bottom },
          $(
            go.Shape,
            "RoundedRectangle",
            { fill: "#F1C40F", width: 100, height: 100 },
            new go.Binding("fill", "color")
          ),
          $(
            go.TextBlock,
            {
              font: "bold 10pt sans-serif",
              stroke: "#ECF0F1",
              textAlign: "center",
              margin: 2,
              width: 50,
              height: 50,
              editable: true,
              isMultiline: true,
            },
            new go.Binding("text", "text"),
            new go.Binding("stroke", "stroke")
          )
        )
      )
    );

    // Add nodes to the diagram
    diagram.model = $(go.TreeModel, {
      nodeDataArray: [
        {
          key: "R1",
          text: "Root",
          color: "#8E44AD",
          figure: "Rectangle",
        },
      ],
    });

    // customize the layout of the tree
    diagram.layout = $(go.TreeLayout, {
      angle: 90,
      nodeSpacing: 20,
      layerSpacing: 80,
    });

    // store Diagram instance
    diagramInstanceRef.current = diagram;
  }, [diagramRef.current]);

  // cleanup function
  useEffect(() => {
    return () => {
      if (diagramInstanceRef.current) {
        diagramInstanceRef.current.div = null;
        diagramInstanceRef.current = null;
      }
    };
  }, []);

  return (
    <>
      <section>
        <Head>
          <title>Database Mgmt App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css"
            integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w=="
            crossOrigin="anonymous"
            referrerPolicy="no-referrer"
          />
        </Head>
        <main className="py-5">
          <h1 className="text-xl md:text-5xl text-center font-bold py-10 border-b">
            Database Schema and Data
          </h1>
          <br />

          <div className="container mx-auto border-t">
            <div
              className="border rounded-md"
              ref={diagramRef}
              style={{
                width: "100%",
                height: "800px",
                backgroundColor: "#f0f0f0",
              }}
            />
          </div>
        </main>
      </section>
    </>
  );
};

export default ChatgptMindmap;
